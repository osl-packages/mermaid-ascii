name: main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Linux/macOS path (Conda + Bash) ----------
      - name: Setup Conda (Unix)
        if: matrix.os != 'windows-latest'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "latest"
          environment-file: conda/env.yaml
          channels: conda-forge,nodefaults
          activate-environment: mermaidascii
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Build upstream binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: |
          set -euo pipefail
          bash ./scripts/binary.sh
          poetry build
          python -m pip install -U pip
          # Prefer the wheel; fallback to sdist
          python -m pip install dist/*.whl || python -m pip install dist/*.tar.gz

      - name: Test cmd & binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: make smoke-test

      # ---------- Windows path (PowerShell + setup-go + setup-python) ----------
      - name: Setup Go (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Setup Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install -U pip
          python -m pip install poetry

      - name: Build upstream binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ./scripts/binary.ps1

      - name: Build & install package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          poetry build
          python -m pip install dist/*.whl || python -m pip install dist/*.tar.gz

      - name: Smoke test (Windows, Python API)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python - << 'PY'
          from mermaid_ascii import mermaid_to_ascii
          out = mermaid_to_ascii("graph TD\nA-->B\n")
          assert "A" in out and "B" in out, out
          print(out)
          PY
