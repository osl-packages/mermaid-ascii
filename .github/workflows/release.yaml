name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  prep:
    name: Prepare version bump
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      version: ${{ steps.buildpkg.outputs.version }}
      changed: ${{ steps.buildpkg.outputs.changed }}
      tag_exists: ${{ steps.tagcheck.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "latest"
          environment-file: conda/env.yaml
          channels: conda-forge,nodefaults
          activate-environment: mermaidascii
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Build package (re-bundle & bump local pyproject if upstream changed)
        id: buildpkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -euo pipefail
          make binary
          poetry build
          VER="$(python scripts/get_version.py)"
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          if git diff --quiet -- pyproject.toml; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Check tag existence
        id: tagcheck
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.buildpkg.outputs.version }}"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes (tag)
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && steps.buildpkg.outputs.changed == 'true' && steps.tagcheck.outputs.exists != 'true' }}
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Ivan Ogasawara
          author_email: ivan.ogasawara@gmail.com
          message: "Bump mermaid-ascii to ${{ steps.buildpkg.outputs.version }}"
          add: "pyproject.toml"
          tag: "${{ steps.buildpkg.outputs.version }}"

      - name: Nothing to release (prep)
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && (steps.buildpkg.outputs.changed != 'true' || steps.tagcheck.outputs.exists == 'true') }}
        run: echo "Up-to-date or tag exists. Skipping."

  build-wheels:
    name: Build wheels (${{ matrix.os }})
    needs: prep
    if: ${{ needs.prep.outputs.changed == 'true' && needs.prep.outputs.tag_exists != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "latest"
          environment-file: conda/env.yaml
          channels: conda-forge,nodefaults
          activate-environment: mermaidascii
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Ensure make on Windows
        if: runner.os == 'Windows'
        run: conda install -y m2-make

      - name: Build OS-specific binary and wheel
        run: |
          set -euo pipefail
          make binary
          poetry build
          ls -l dist

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
          if-no-files-found: error
          retention-days: 3

  publish:
    name: Publish to PyPI
    needs: [prep, build-wheels]
    if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && needs.prep.outputs.changed == 'true' && needs.prep.outputs.tag_exists != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish (PyPI)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: dist
          skip-existing: true

  create-release:
    name: Create GitHub Release
    needs: [prep, publish]
    if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && needs.prep.outputs.changed == 'true' && needs.prep.outputs.tag_exists != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prep.outputs.version }}
          release_name: Release ${{ needs.prep.outputs.version }}
          body: Update mermaid-ascii to ${{ needs.prep.outputs.version }}
          draft: false
          prerelease: false
