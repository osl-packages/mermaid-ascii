name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "latest"
          environment-file: conda/env.yaml
          channels: conda-forge,nodefaults
          activate-environment: mermaidascii
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Build package (re-bundle & bump local pyproject if upstream changed)
        id: buildpkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -euo pipefail
          make binary
          poetry build
          # extract version from pyproject AFTER versioning
          VER="$(python scripts/get_version.py)"
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          # mark if pyproject changed
          if git diff --quiet -- pyproject.toml; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Check tag existence
        id: tagcheck
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.buildpkg.outputs.version }}"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # Commit & tag only when version changed (schedule/dispatch runs)
      - name: Commit changes
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && steps.buildpkg.outputs.changed == 'true' && steps.tagcheck.outputs.exists != 'true' }}
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Ivan Ogasawara
          author_email: ivan.ogasawara@gmail.com
          message: "Bump mermaid-ascii to ${{ steps.buildpkg.outputs.version }}"
          add: "pyproject.toml"
          tag: "${{ steps.buildpkg.outputs.version }}"

      # Publish to PyPI only when new version
      - name: Release to PyPI
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && steps.buildpkg.outputs.changed == 'true' && steps.tagcheck.outputs.exists != 'true' }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "${PYPI_TOKEN}"
          poetry publish

      # Create GitHub Release from the tag we just created
      - name: Create Release
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && steps.buildpkg.outputs.changed == 'true' && steps.tagcheck.outputs.exists != 'true' }}
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.buildpkg.outputs.version }}
          release_name: Release ${{ steps.buildpkg.outputs.version }}
          body: Update mermaid-ascii to ${{ steps.buildpkg.outputs.version }}
          draft: false
          prerelease: false

      # Optional: no-op when unchanged (gives clear logs)
      - name: Nothing to release
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && steps.buildpkg.outputs.changed != 'true' || steps.tagcheck.outputs.exists != 'true' }}
        run: echo "Up-to-date. No release."
